plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

dependencies {
    implementation project(':entity')
    implementation project(':template-base')
    api 'org.jetbrains.kotlinx:kotlinx-serialization-json:' + serializationVersion
    implementation 'net.devrieze:xmlutil-jvm:' + xmlUtilVersion
    implementation 'net.devrieze:xmlutil-serialization-jvm:' + xmlUtilVersion
    //
    // testImplementation 'junit:junit:' + jUnitVersion
    // testImplementation 'org.hamcrest:hamcrest-all:' + hamcrestVersion
    // testImplementation 'org.robolectric:robolectric:' + robolectricVersion
}

def version = '0.0.1'

jar {
    manifest {
        attributes 'Main-Class': 'MainCli'
        attributes 'Implementation-Version': version
    }
}

//task run(type: JavaExec, group: "build") {
//    description = "Run this."
//    main = 'MainCli'
//    classpath = sourceSets.main.runtimeClasspath
//    // args "../sources/dvd_plastic_case_v1_0.apk" // <- V1
//    // args "../sources/bsod_menjesse_v1_0.apk" // <- V2
//    // args "../sources/sample_v3.apk" // <- V3
//    args "../../TemplateHishoot/sources/bsod_menjesse_v1_0.apk" //
//}

def fatJarProvider = tasks.register('fatJar', Jar) { task ->
    task.dependsOn(configurations.named('runtimeClasspath'))
    task.dependsOn(tasks.named('jar'))
    task.classifier 'fat'
    task.manifest {
        attributes 'Main-Class': 'MainCli'
        attributes 'Implementation-Version': version
    }
    def sourceClasses = sourceSets.main.output.classesDirs
    task.inputs.files(sourceClasses)

    task.doFirst {
        task.from files(sourceClasses)
        task.from configurations.runtimeClasspath.asFileTree.files.collect { zipTree(it) }
        task.exclude '**/*.kotlin_metadata'
        task.exclude '**/*.kotlin_module'
        task.exclude '**/*.kotlin_builtins'
        task.exclude '**/module-info.class'
        task.exclude 'META-INF/maven/**'
        task.exclude 'META-INF/*.version'
        task.exclude '**/*.proto'
        task.exclude 'LICENSE'
        task.exclude 'NOTICE'
    }
}

def binaryFile = new File(buildDir, "libs/$archivesBaseName-$version-binary.jar")
def binaryJar = tasks.register('binaryCliJar') { task ->
    task.dependsOn(fatJarProvider)
    def fatJar = fatJarProvider.get()
    def fatJarFile = fatJar.archivePath
    task.inputs.file(fatJarFile)
    task.outputs.file(binaryFile)

    task.doLast {
        binaryFile.getParentFile().mkdirs()
        binaryFile.delete()
        binaryFile << "#!/bin/sh\n\nexec java \$JAVA_OPTS -jar \$0 \"\$@\"\n\n"
        fatJarFile.withInputStream { binaryFile.append it }

        binaryFile.setExecutable true, false
    }
}

artifacts {
    archives file: binaryFile, name: 'binary', type: 'jar', builtBy: binaryJar, classifier: 'htz-converter-cli'
}
