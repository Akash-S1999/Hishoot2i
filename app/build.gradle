buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
  }
  dependencies {
    classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    classpath 'com.frogermcs.androiddevmetrics:androiddevmetrics-plugin:0.4'
    classpath 'io.fabric.tools:gradle:1.21.5'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'io.fabric'
apply from: '../buildsystem/quality/quality.gradle'

repositories {
  jcenter()
  mavenCentral()
  maven { url 'https://maven.fabric.io/public' }
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    applicationId rootProject.ext.applicationId
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode rootProject.ext.versionCode
    versionName rootProject.ext.versionName
    resValue("string", "tray__authority", "${applicationId}.tray")
    resValue("string", "app_version", "$versionName")
    resValue("string", "app_name", "$rootProject.ext.appName")
    resValue("string", "app_build", "$rootProject.ext.buildTime")
    vectorDrawables.useSupportLibrary = true
    resConfig("en")
    archivesBaseName = rootProject.ext.archivesBaseName //must sync gradle
//    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  packagingOptions {
    exclude "META-INF/services/javax.annotation.processing.Processor"
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE.txt"
    exclude "META-INF/LICENSE"
    exclude "META-INF/NOTICE"
    exclude ".readme"
    exclude "META-INF/INDEX.LIST"
    exclude "LICENSE.txt"
    exclude "NOTICE.txt"
  }
  signingConfigs {
    if (isExists("sign.properties")) {
      release {
        Properties prop = loadProp("sign.properties")
        keyAlias prop["keyAlias"]
        keyPassword prop["keyPassword"]
        storeFile file(prop["storeFile"])
        storePassword prop["storePassword"]
      }
    }
  }
  buildTypes {
    debug {
      manifestPlaceholders = [fabric_api_key: ""]
      minifyEnabled false
      buildConfigField "boolean", "USE_CRASHLYTICS", "false"
      ext.enableCrashlytics = false
      debuggable true
    }
    release {
      manifestPlaceholders = [fabric_api_key: isExists("fabric.properties") ?
          loadFromProp("fabric.properties", "apiKey") : ""]
      if (isExists("sign.properties")) {
        minifyEnabled true
        shrinkResources true
        zipAlignEnabled true
        signingConfig android.signingConfigs.release
        proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        final FileCollection proguardCollection = files {
          file("../buildsystem/proguard").listFiles()
        }
        proguardFiles(proguardCollection)
      }
      buildConfigField "boolean", "USE_CRASHLYTICS", "true"
      ext.enableCrashlytics = true
      debuggable false
    }
  }
  dexOptions {
    javaMaxHeapSize "2g"
    dexInProcess true
    preDexLibraries true
  }
  lintOptions {
    abortOnError false
    disable "UnusedResources", "IconDensities", "IconMissingDensityFolder"
  }
}
dependencies {
  def appDependencies = rootProject.ext.dependencies
  apt(appDependencies.butterknifeCompiler,
      appDependencies.daggerCompiler)

  provided(appDependencies.javaxAnnotation,
      appDependencies.dartProcessor)

  compile(appDependencies.appCompat,
      appDependencies.cardView,
      appDependencies.design,
      appDependencies.recyclerView,
      appDependencies.preferenceV7,
      appDependencies.supportAnnotation,
      appDependencies.customActivityOnCrash,
      appDependencies.eventBus,
      appDependencies.gson,
      appDependencies.universalImageLoader,
      appDependencies.dart,
      appDependencies.dagger,
      appDependencies.tray,
      appDependencies.bottomBar,
      appDependencies.smoothProgressbar,
      appDependencies.materialSearchview,
      appDependencies.recyclerviewAnimators,
      appDependencies.swipeRevealLayout,
      appDependencies.appUpdater,
      appDependencies.rxJava,
      appDependencies.rxAndroid,
      appDependencies.butterknife,
      appDependencies.stream)

  compile(appDependencies.crashlytics) { transitive = true }
  compile(appDependencies.aboutLibraries) { transitive = true }

  debugCompile appDependencies.leakcanary
  releaseCompile appDependencies.leakcanaryNoop

  retrolambdaConfig appDependencies.retrolambda

  //test
  def testDependencies = rootProject.ext.testDependencies
  //instrument/ui test
//  androidTestCompile(testDependencies.mockitoCore,
//      testDependencies.dexmaker,
//      testDependencies.dexmakerMockito,
//      testDependencies.espressoCore,
//      testDependencies.testingSupport,
//      testDependencies.runner,
//      testDependencies.rules,
//      testDependencies.uiautomator,
//      appDependencies.supportAnnotation,)

  //local/unit test
//  testCompile(testDependencies.jUnit,
//      testDependencies.mockitoCore,
//      testDependencies.robolectric,
//      // testDependencies.androidUnitTest,
//      testDependencies.truth,)
}

Boolean isExists(String path) {
  return file(path).exists()
}

String loadFromProp(String pathProp, String key) {
  Properties props = loadProp(pathProp)
  if (props.containsKey(key)) {
    return props[key]
  } else {
    throw new GradleException(String.format("key: %s notfound", key))
  }
}

Properties loadProp(String pathProp) {
  Properties props = new Properties()
  def fileProp = file(pathProp)
  if (fileProp.canRead()) {
    props.load(new FileInputStream(fileProp))
  } else {
    throw new GradleException(String.format("missing prop: %s", pathProp))
  }
  return props;
}