buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.20.1'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.3.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.getkeepsafe.dexcount'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 5
def versionBuild = 0 // ?
def buildTime = new Date().format("yyyyMMdd");
def appName = "Hishoot2i"

Properties props = new Properties()
File fileSign = file("sign.properties")
if (fileSign.exists()) {
    props.load(new FileInputStream(fileSign))
} else {
    throw new RuntimeException("must set sing.properties")
}



android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude '.readme'
        exclude 'META-INF/INDEX.LIST'
        exclude 'LICENSE.txt'
        exclude 'NOTICE.txt'
    }

    defaultConfig {
        applicationId "org.illegaller.ratabb.hishoot2i"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        resValue("string", "app_version", "${versionName}")
        resValue("string", "app_name", "${appName}")

        archivesBaseName = "$appName" + "-v$versionName" + "-$buildTime" + "-minApi$rootProject.ext.minSdkVersion"
    }

    signingConfigs {
        release {
            keyAlias props['alias']
            keyPassword props['pass']
            storeFile file(props['dir'])
            storePassword props['pass']
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            // disable crashlytics
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig android.signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // enable crashlytics
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
        }
    }
    lintOptions {
        // abortOnError false
        disable 'UnusedResources','IconDensities','UnusedAttribute'
    }

}

dependencies {
    compile project(':holocolorpicker')

    Map<String, String> dependencies = rootProject.ext.dependencies;
    compile dependencies.appCompat
    compile dependencies.cardView
    compile dependencies.design
    compile dependencies.recyclerView

    compile dependencies.butterknife
    compile dependencies.gson
    compile dependencies.universalImageLoader
    compile dependencies.customActivityOnCrash
    compile(dependencies.crashlytics) { transitive = true }

    debugCompile dependencies.leakcanaryDebug
    releaseCompile dependencies.leakcanaryRelease

    compile dependencies.dagger
    provided dependencies.daggerCompiler
    compile dependencies.dart
    compile dependencies.otto

    compile dependencies.filePicker
}