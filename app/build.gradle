buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://maven.fabric.io/public" }
  }
  dependencies {
    classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    classpath 'com.frogermcs.androiddevmetrics:androiddevmetrics-plugin:0.4'
    classpath 'io.fabric.tools:gradle:1.21.5'
  }
}

apply plugin: "com.android.application"
apply plugin: 'me.tatarka.retrolambda'
apply plugin: "com.neenbedankt.android-apt"
apply plugin: "com.frogermcs.androiddevmetrics"
apply plugin: "io.fabric"

repositories {
  jcenter()
  mavenCentral()
  maven { url "https://maven.fabric.io/public" }
}

def versionMajor = 1
def versionMinor = 1
def versionPatch = 2
def versionBuild = 0
def buildTime = new Date().format("yyyyMMdd");
def appName = "Hishoot2i"

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  packagingOptions {
    exclude "META-INF/services/javax.annotation.processing.Processor"
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE.txt"
    exclude "META-INF/LICENSE"
    exclude "META-INF/NOTICE"
    exclude ".readme"
    exclude "META-INF/INDEX.LIST"
    exclude "LICENSE.txt"
    exclude "NOTICE.txt"
  }

  defaultConfig {
    applicationId "org.illegaller.ratabb.hishoot2i"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    resValue("string", "tray__authority", "${applicationId}.tray")
    resValue("string", "app_version", "$versionName")
    resValue("string", "app_name", "$appName")
    resValue("string", "app_build", "$buildTime")
    vectorDrawables.useSupportLibrary = true
    resConfig("en")
    archivesBaseName =
        "$appName" + "-v${versionName}" + "-${buildTime}" + "-minApi${minSdkVersion.apiLevel}"
  }

  signingConfigs {
    if (file("sign.properties").exists()) {
      release {
        Properties prop = loadProp("sign.properties")
        keyAlias prop["keyAlias"]
        keyPassword prop["keyPassword"]
        storeFile file(prop["storeFile"])
        storePassword prop["storePassword"]
      }
    }
  }
  buildTypes {
    debug {
      manifestPlaceholders = [fabric_api_key: ""]
      minifyEnabled false
      buildConfigField "boolean", "USE_CRASHLYTICS", "false"
      ext.enableCrashlytics = false
      debuggable true
    }
    release {
      manifestPlaceholders = [fabric_api_key: (file("sign.properties").exists()) ?
          loadFromProp("fabric.properties", "apiKey") : ""]
      if (file("sign.properties").exists()) {
        minifyEnabled true
        shrinkResources true
        zipAlignEnabled true
        signingConfig android.signingConfigs.release
      }
      proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
      final FileCollection proguardCollection = files {
        file("../buildsystem/proguard").listFiles()
      }
      proguardFiles(proguardCollection)
      buildConfigField "boolean", "USE_CRASHLYTICS", "true"
      ext.enableCrashlytics = true
      debuggable false
    }
  }
  dexOptions { javaMaxHeapSize "2g" }
  lintOptions {
    abortOnError false
    disable "IconDensities", "IconMissingDensityFolder"
  }
}
dependencies {
  def appDependencies = rootProject.ext.dependencies
  apt appDependencies.getAt("com.jakewharton:butterknife-compiler")
  apt appDependencies.getAt("com.google.dagger:dagger-compiler")

  provided appDependencies.getAt("javax.annotation:jsr250-api")
  provided appDependencies.getAt("com.f2prateek.dart:dart-processor")

  compile appDependencies.getAt("com.android.support:appcompat-v7")
  compile appDependencies.getAt("com.android.support:cardview-v7")
  compile appDependencies.getAt("com.android.support:design")
  compile appDependencies.getAt("com.android.support:preference-v7")
  compile appDependencies.getAt("com.android.support:recyclerview-v7")

  compile appDependencies.getAt("cat.ereza:customactivityoncrash")
  compile appDependencies.getAt("org.greenrobot:eventbus")
  compile appDependencies.getAt("com.google.code.gson:gson")
  compile appDependencies.getAt("com.nostra13.universalimageloader:universal-image-loader")
  compile appDependencies.getAt("com.f2prateek.dart:dart")
  compile appDependencies.getAt("com.google.dagger:dagger")
  compile appDependencies.getAt("net.grandcentrix.tray:tray")
  compile appDependencies.getAt("com.roughike:bottom-bar")
  compile appDependencies.getAt("com.github.castorflex.smoothprogressbar:library")
  compile appDependencies.getAt("com.miguelcatalan:materialsearchview")
  compile appDependencies.getAt("jp.wasabeef:recyclerview-animators")
  compile appDependencies.getAt("com.chauthai.swipereveallayout:swipe-reveal-layout")
  compile appDependencies.getAt("com.github.javiersantos:AppUpdater")
  compile appDependencies.getAt("io.reactivex:rxjava")
  compile appDependencies.getAt("io.reactivex:rxandroid")
  compile appDependencies.getAt("com.jakewharton:butterknife")

  compile(appDependencies.getAt("com.crashlytics.sdk.android:crashlytics")) { transitive = true }
  compile(appDependencies.getAt("com.mikepenz:aboutlibraries")) { transitive = true }

  debugCompile appDependencies.getAt("com.squareup.leakcanary:leakcanary-android")
  releaseCompile appDependencies.getAt("com.squareup.leakcanary:leakcanary-android-no-op")

  retrolambdaConfig appDependencies.getAt("net.orfjackal.retrolambda:retrolambda")
}

String loadFromProp(String pathProp, String key) {
  Properties props = loadProp(pathProp)
  if (props.containsKey(key)) {
    return props[key]
  } else {
    throw new GradleException(String.format("key: %s notfound", key))
  }
}

Properties loadProp(String pathProp) {
  Properties props = new Properties()
  def fileProp = file(pathProp)
  if (fileProp.canRead()) {
    props.load(new FileInputStream(fileProp))
  } else {
    throw new GradleException(String.format("missing prop: %s", pathProp))
  }
  return props;
}